// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherForecast.Infrastructure.Data;

namespace WeatherForecast.Infrastructure.Migrations
{
    [DbContext(typeof(WeatherForecastDbContext))]
    [Migration("20220426163929_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("WeatherForecast.Core.Entities.ForecastDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CloudCover")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Icon")
                        .HasColumnType("int");

                    b.Property<string>("IconPhrase")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("WindSpeed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("WindSpeedUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("WindSpeedUnitId");

                    b.ToTable("ForecastDetails");
                });

            modelBuilder.Entity("WeatherForecast.Core.Entities.Temperature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MaxPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MinPhrase")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("UnitMeasureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UnitMeasureId");

                    b.ToTable("Temperatures");
                });

            modelBuilder.Entity("WeatherForecast.Core.Entities.UnitMeasure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("UnitMeasures");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc1777d7-e705-42c1-80bb-bb619730f6e0"),
                            Unit = "ft",
                            UnitType = 0
                        },
                        new
                        {
                            Id = new Guid("02ef9dd1-073c-459a-a8ed-7b41b2373beb"),
                            Unit = "in",
                            UnitType = 1
                        },
                        new
                        {
                            Id = new Guid("26a19e21-af30-4674-b74f-235ba363a9a4"),
                            Unit = "mi",
                            UnitType = 2
                        },
                        new
                        {
                            Id = new Guid("5f5ba08d-980d-4e7a-b5f1-1b19b9944731"),
                            Unit = "mm",
                            UnitType = 3
                        },
                        new
                        {
                            Id = new Guid("05eb6296-7ed9-47bb-b081-4ac3f8665ed4"),
                            Unit = "cm",
                            UnitType = 4
                        },
                        new
                        {
                            Id = new Guid("476b2538-bfe1-4a6d-b1b4-070d94fd5893"),
                            Unit = "m",
                            UnitType = 5
                        },
                        new
                        {
                            Id = new Guid("90a64f8f-cd3a-44a1-a13d-65330d536af9"),
                            Unit = "km",
                            UnitType = 6
                        },
                        new
                        {
                            Id = new Guid("30ae5fbc-1a34-4064-b2df-7030be47c024"),
                            Unit = "km/h",
                            UnitType = 7
                        },
                        new
                        {
                            Id = new Guid("a3cbcea3-71ea-434c-93b0-a163c0bd13b5"),
                            Unit = "kt",
                            UnitType = 8
                        },
                        new
                        {
                            Id = new Guid("86c66721-9354-4cb0-80ef-a298b6bea86c"),
                            Unit = "mi/h",
                            UnitType = 9
                        },
                        new
                        {
                            Id = new Guid("1bb62832-8497-4915-b33c-db1a3cbdb030"),
                            Unit = "m/s",
                            UnitType = 10
                        },
                        new
                        {
                            Id = new Guid("69769a87-a256-42ea-b97c-0b59fa96b6b8"),
                            Unit = "hPa",
                            UnitType = 11
                        },
                        new
                        {
                            Id = new Guid("72286c7d-5122-4406-9eee-af54d94328f2"),
                            Unit = "Hg",
                            UnitType = 12
                        },
                        new
                        {
                            Id = new Guid("085a009b-bae9-4432-9fe5-06defaff0c30"),
                            Unit = "kPa",
                            UnitType = 13
                        },
                        new
                        {
                            Id = new Guid("ff471d7b-3f8f-428d-ae58-95a0d03bfe2f"),
                            Unit = "mbar",
                            UnitType = 14
                        },
                        new
                        {
                            Id = new Guid("0d767092-b974-46f9-b0ed-78b40556d400"),
                            Unit = "mmHg",
                            UnitType = 15
                        },
                        new
                        {
                            Id = new Guid("42c3f36f-0b2d-4e68-bb31-b55c46b613f5"),
                            Unit = "psi",
                            UnitType = 16
                        },
                        new
                        {
                            Id = new Guid("80a38272-0cca-4943-94ce-22fe1597afe1"),
                            Unit = "C",
                            UnitType = 17
                        },
                        new
                        {
                            Id = new Guid("17088e9c-8636-4bb4-ad2c-1bda69a497f7"),
                            Unit = "F",
                            UnitType = 18
                        },
                        new
                        {
                            Id = new Guid("1a4a079b-9813-4540-b242-21749840d317"),
                            Unit = "K",
                            UnitType = 19
                        },
                        new
                        {
                            Id = new Guid("8a68f4a6-36fa-464f-9d82-e221568f0db1"),
                            Unit = "%",
                            UnitType = 20
                        },
                        new
                        {
                            Id = new Guid("25845b49-0266-421e-b027-08484873568e"),
                            Unit = "f",
                            UnitType = 21
                        },
                        new
                        {
                            Id = new Guid("8f6e3329-6cf5-4727-82dc-c8b5967fba3b"),
                            Unit = "int",
                            UnitType = 22
                        });
                });

            modelBuilder.Entity("WeatherForecast.Core.Entities.WeatherCast", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LocationKey")
                        .HasColumnType("int");

                    b.Property<Guid>("NightId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RealFeelTemperatureId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TemperatureId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.HasIndex("NightId");

                    b.HasIndex("RealFeelTemperatureId");

                    b.HasIndex("TemperatureId");

                    b.ToTable("WeatherForecasts");
                });

            modelBuilder.Entity("WeatherForecast.Core.Entities.ForecastDetail", b =>
                {
                    b.HasOne("WeatherForecast.Core.Entities.UnitMeasure", "WindSpeedUnit")
                        .WithMany()
                        .HasForeignKey("WindSpeedUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WindSpeedUnit");
                });

            modelBuilder.Entity("WeatherForecast.Core.Entities.Temperature", b =>
                {
                    b.HasOne("WeatherForecast.Core.Entities.UnitMeasure", "UnitMeasure")
                        .WithMany()
                        .HasForeignKey("UnitMeasureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UnitMeasure");
                });

            modelBuilder.Entity("WeatherForecast.Core.Entities.WeatherCast", b =>
                {
                    b.HasOne("WeatherForecast.Core.Entities.ForecastDetail", "Day")
                        .WithMany()
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecast.Core.Entities.ForecastDetail", "Night")
                        .WithMany()
                        .HasForeignKey("NightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecast.Core.Entities.Temperature", "RealFeelTemperature")
                        .WithMany()
                        .HasForeignKey("RealFeelTemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WeatherForecast.Core.Entities.Temperature", "Temperature")
                        .WithMany()
                        .HasForeignKey("TemperatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");

                    b.Navigation("Night");

                    b.Navigation("RealFeelTemperature");

                    b.Navigation("Temperature");
                });
#pragma warning restore 612, 618
        }
    }
}
